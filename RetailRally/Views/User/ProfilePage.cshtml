@using Microsoft.AspNetCore.Identity
@using RetailRally.ViewModels
@using static RetailRally.Helpers.Roles
@inject UserManager<User> UserManager
@model UserVm
@{
    var user = await UserManager.GetUserAsync(User);
    bool emailConfirmed = user?.EmailConfirmed ?? false;
    var messageSent = TempData["MessageSent"] as bool?;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Сторінка профілю</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="~/css/styles.css">
    <style>
        :root {
            --theme: light;
            --background-color-light: #f5f7fa; /* Light blueish */
            --background-color-dark: #1f1f1f;
            --background-main-color-dark: #4A4A4A;
            --color-light: #000000;
            --color-dark: #e0e0e0;
            --profile-sidebar-bg-light: #ffffff; /* White */
            --profile-sidebar-bg-dark: #2c2f33;
            --profile-sidebar-color-light: #000000;
            --profile-sidebar-color-dark: #ffffff;
            --profile-content-bg-light: #f0f0f0;
            --profile-content-bg-dark: #2c2f33;
            --profile-content-color-light: #000000;
            --profile-content-color-dark: #ffffff;
            --info-color-light: #000000;
            --info-color-dark: #e0e0e0;
            --validation-error-bg-light: #f8d7da;
            --validation-error-bg-dark: #721c24;
            --validation-error-color-light: #721c24;
            --validation-error-color-dark: #ffffff;
            --button-bg-dark: #3a3a3a; /* Button background */
            --button-color-dark: #ffffff; /* Button text color */
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: var(--background-color-dark);
            color: var(--color-dark);
            margin: 0;
            padding: 0;
        }

            body[data-theme='light'] {
                background-color: var(--background-color-light);
                color: var(--color-light);
            }

        .profile-page {
            background-color: var(--background-main-color-dark);
            margin-top: 50px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 2rem;
            gap: 2rem;
        }

        body[data-theme='light'] .profile-page{
            background-color: var(--background-color-light);
            color:white;
        }

        .profile-sidebar {
            flex: 1;
            background-color: var(--profile-sidebar-bg-dark);
            padding: 2rem;
            border-radius: 8px;
            text-align: center;
            color: var(--profile-sidebar-color-dark);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        body[data-theme='light'] .profile-sidebar {
            background-color: var(--profile-sidebar-bg-light);
            color: var(--profile-sidebar-color-light);
        }

        .profile-sidebar img {
            border-radius: 50%;
            width: 150px;
            height: 150px;
            object-fit: cover;
            margin-bottom: 1rem;
        }

        .profile-content {
            flex: 2;
            background-color: var(--profile-content-bg-dark);
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            color: var(--profile-content-color-dark);
        }

            .profile-content label {
                color: var(--profile-content-color-dark);
            }

        body[data-theme='light'] .profile-content {
            background-color: var(--profile-content-bg-light);
            color: var(--profile-content-color-light);
        }

            body[data-theme='light'] .profile-content label {
                color: var(--profile-content-color-light);
            }


        .profile-content h2 {
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .info {
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

            .info label {
                font-weight: bold;
                width: 150px;
            }

            .info span {
                flex: 1;
                color: var(--info-color-dark);
            }

        body[data-theme='light'] .info span {
            color: var(--info-color-light);
        }

        .info input {
            flex: 1;
            display: none;
        }

        .btn {
            margin-right: 1rem;
            background-color: var(--button-bg-dark);
            color: var(--button-color-dark);
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        body[data-theme='light'] .btn {
            background-color: #007bff; /* Light theme button background */
            color: #ffffff; /* Light theme button text color */
        }

        .validation-error {
            background-color: var(--validation-error-bg-dark);
            color: var(--validation-error-color-dark);
            padding: 0.5rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }

        body[data-theme='light'] .validation-error {
            background-color: var(--validation-error-bg-light);
            color: var(--validation-error-color-light);
        }

        .validation-error::before {
            content: '⚠ ';
        }

    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if (@Html.Raw(Json.Serialize(TempData["Message"])) === true) {
                Swal.fire({
                    title: 'Зміна адреси електронної пошти відбулася успішно!',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1000
                });
            }

            if (@Html.Raw(Json.Serialize(TempData["PasswordMessage"])) === true) {
                Swal.fire({
                    title: 'Зміна пароля пройшла успішно!',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1000
                });
            }

            if (@Html.Raw(Json.Serialize(TempData["Success"])) === true) {
                Swal.fire({
                    title: 'Ви підтвердили свій обліковий запис!',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1000
                });
            }

            var shouldOpenEditForm = @Html.Raw(Json.Serialize(Model.IsEditFormOpen));
            var editButton = document.getElementById('editButton');
            var saveButton = document.getElementById('saveButton');
            var backButton = document.getElementById('backButton');
            var changeEmailButton = document.getElementById('changeEmailButton');
            var changePasswordButton = document.getElementById('changePasswordButton');
            var becomeVendorButton = document.getElementById('becomeVendorButton');
            var emailSpan = document.getElementById('emailSpan');

            function openEditForm() {
                toggleForm(true);
            }

            function closeEditForm() {
                toggleForm(false);
            }

            function toggleForm(isEditMode) {
                var infoElements = document.querySelectorAll('.info');

                infoElements.forEach(function (info) {
                    var span = info.querySelector('span');
                    var input = info.querySelector('input');
                    if (span && input) {
                        span.style.display = isEditMode ? 'none' : 'inline';
                        input.style.display = isEditMode ? 'inline' : 'none';
                    }
                });

                if (emailSpan) {
                    emailSpan.style.display = isEditMode ? 'none' : 'inline';
                }
                editButton.style.display = isEditMode ? 'none' : 'block';
                saveButton.style.display = isEditMode ? 'block' : 'none';
                backButton.style.display = isEditMode ? 'block' : 'none';
                changeEmailButton.style.display = isEditMode ? 'block' : 'none';
                changePasswordButton.style.display = isEditMode ? 'block' : 'none';
                becomeVendorButton.style.display = isEditMode ? 'block' : 'none';
            }

            if (shouldOpenEditForm) {
                openEditForm();
            }

            editButton.addEventListener('click', function () {
                openEditForm();
            });

            backButton.addEventListener('click', function () {
                closeEditForm();
            });

            document.getElementById('editForm').addEventListener('submit', function (event) {
                event.preventDefault();
                var form = this;
                var formData = new FormData(form);
                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Профіль успішно оновлено!',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1000
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            var errorList = document.querySelector('.validation-error ul');
                            errorList.innerHTML = '';
                            data.errors.forEach(error => {
                                var li = document.createElement('li');
                                li.textContent = error.description;
                                errorList.appendChild(li);
                            });
                            document.querySelector('.validation-error').style.display = 'block';
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });

            document.getElementById('changePicButton').addEventListener('click', function () {
                document.getElementById('picForm').style.display = 'block';
                this.style.display = 'none';
            });

            document.getElementById('cancelPicChange').addEventListener('click', function () {
                document.getElementById('picForm').style.display = 'none';
                document.getElementById('changePicButton').style.display = 'inline-block';
            });

            var inputs = document.querySelectorAll('input, textarea');
            inputs.forEach(function (input) {
                input.addEventListener('input', function () {
                    document.querySelector('.validation-error').style.display = 'none';
                });
            });

            document.getElementById('profilePicture').addEventListener('change', function (e) {
                var validTypes = ['image/jpeg', 'image/png'];
                if (this.files.length > 0) {
                    var fileType = this.files[0].type;
                    if (!validTypes.includes(fileType)) {
                        alert('Допускаються лише файли зображень!');
                        this.value = '';
                    }
                }
            });

            document.getElementById('confirmEmailButton').addEventListener('click', function () {
                console.log('Confirm Email Button Clicked');
                var email = '@Model.Email';
                fetch('/Account/SendEmailConfirmationLink', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(email)
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Не вдалося надіслати посилання для підтвердження на електронну пошту.');
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Посилання для підтвердження надіслано на електронну пошту!',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1000
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Не вдалося надіслати посилання для підтвердження на електронну пошту.',
                                text: data.error,
                                icon: 'error',
                                showConfirmButton: true
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Помилка',
                            text: error.message,
                            icon: 'error',
                            showConfirmButton: true
                        });
                    });
            });


        });
    </script>

</head>
<body>
    @if (messageSent == true)
    {
        <p class="alert alert-success">Будь ласка, перевірте свою електронну пошту, щоб підтвердити обліковий запис.</p>
    }
    else
    {
        <div class="profile-page">
            <div class="profile-sidebar">
                <img src="@Model.PictureUrl" alt="Profile Picture">
                <h2>@Model?.FirstName @Model?.LastName</h2>
                <p>Ім'я користувача: @Model?.UserName</p>
                <p>Роль: @Model?.Role</p>
                <button class="btn btn-primary" id="changePicButton">Змінити зображення профілю</button>
                <form asp-action="ChangeProfilePicture" asp-controller="User" method="post" enctype="multipart/form-data" id="picForm" style="display:none;">
                    <input class="form-control" type="file" id="profilePicture" name="profilePicture" accept="image/jpeg, image/png" />
                    <button type="submit">Підтвердити</button>
                    <button type="button" id="cancelPicChange">Повернутися до сторінки профілю</button>
                </form>
            </div>
            <div class="profile-content">
                <form asp-action="EditProfile" asp-controller="User" method="post" id="editForm">
                    <input type="hidden" asp-for="PictureUrl" />
                    <input type="hidden" asp-for="BirthDate" />
                    <input type="hidden" asp-for="Email" />
                    <h2>Профіль</h2>
                    <div class="validation-error" style="display:none;">
                        Будь ласка, виправте наступні помилки:
                        <ul></ul>
                    </div>
                    <div class="info">
                        <label>Ім'я:</label>
                        <span>@Model?.FirstName</span>
                        <input class="form-control" asp-for="FirstName" type="text" value="@Model.FirstName" />
                    </div>
                    <div class="info">
                        <label>Прізвище:</label>
                        <span>@Model?.LastName</span>
                        <input class="form-control" asp-for="LastName" type="text" value="@Model.LastName" />
                    </div>
                    <div class="info">
                        <label>Ім'я користувача:</label>
                        <span>@Model?.UserName</span>
                        <input class="form-control" asp-for="UserName" type="text" value="@Model.UserName" />
                    </div>
                    @if (emailConfirmed)
                    {
                        <div class="info">
                            <label>Електронна пошта:</label>
                            <span>@Model.Email</span>
                            <a asp-controller="Account" asp-action="ShowEmailChangePage" id="changeEmailButton" class="btn btn-primary" style="display:none;">Змінити адресу електронної пошти</a>
                        </div>
                        <a asp-controller="Account" asp-action="ShowPasswordChangePage" id="changePasswordButton" class="btn btn-primary" style="display:none; margin-top:10px; margin-bottom:10px;">Змінити пароль</a>
                        @if (!User.IsInRole(Role.Vendor) && !User.IsInRole(Role.Admin))
                        {
                            <button type="button" id="becomeVendorButton" class="btn btn-primary" style="display:none;">Стати продавцем</button>
                        }
                    }
                    else
                    {
                        <div class="info">
                            <label>Електронна пошта:</label>
                            <span>@Model.Email</span>
                            <button type="button" id="confirmEmailButton" class="btn btn-primary">Підтвердити адресу електронної пошти</button>
                        </div>
                    }
                    <div class="info">
                        <label>Номер телефону:</label>
                        <span>@(Model.PhoneNumber ?? "N/A")</span>
                        <input class="form-control no-spin-buttons" asp-for="PhoneNumber" type="number" value="@Model.PhoneNumber" />
                    </div>
                    <div class="info">
                        <label>Дата народження:</label>
                        <span>@(Model.BirthDate?.ToString("dd-MM-yyyy") ?? "N/A")</span>
                    </div>
                    <button type="submit" class="btn btn-primary" id="saveButton" style="display:none; margin-top:5px;">Зберегти зміни</button>
                    <button type="button" class="btn btn-secondary" id="backButton" style="display:none; margin-top:10px;">Повернутися до профілю</button>
                    <button type="button" class="btn btn-primary" id="editButton" style="margin-top:5px;">Редагувати профіль</button>
                </form>
            </div>
        </div>
    }
</body>

<script>
    document.getElementById('becomeVendorButton').addEventListener('click', function () {
        console.log('Become Vendor Button Clicked');
        fetch('/User/BecomeVendor', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Не вдалося стати продавцем.');
                }
            })
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Ви стали продавцем!',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1000
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Не вдалося стати продавцем.',
                        text: data.error,
                        icon: 'error',
                        showConfirmButton: true
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Помилка',
                    text: error.message,
                    icon: 'error',
                    showConfirmButton: true
                });
            });
    });
</script>
</html>
